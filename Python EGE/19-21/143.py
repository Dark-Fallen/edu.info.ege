"""
Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может: убрать из кучи два камня или убрать из кучи четыре камня или уменьшить количество камней в куче в три раза (количество камней, полученное при делении, округляется до меньшего). 
Игра завершается, когда количество камней в куче становится не более 40. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 40 или меньше камней. В начальный момент в куче было S камней, S ≥ 41. Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.
Задание 19. 
Укажите минимальное значение S, при котором Петя не может выиграть за один ход, но при любом ходе Пети Ваня может выиграть своим первым ходом.
Задание 20.
Найдите два наименьших значения S, когда Петя имеет выигрышную стратегию, причём одновременно выполняются два условия:
– Петя не может выиграть за один ход;
– Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
Найденные значения запишите в ответе в порядке возрастания.
Задание 21
Найдите минимальное значение S, при котором одновременно выполняются два условия:
– у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
– у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.


Ответ: №19: 123
       №20: 125, 126
       №21: 129
"""

def Game(state: int, step: int, goal: int, winner: int, min_step: int = 1, max_step: int = 2):
    if step > max_step: return False
    if state > goal:
        if step % 2 != winner:
            return any([Game(state - 2, step + 1, goal, winner, min_step, max_step),
                        Game(state - 4, step + 1, goal, winner, min_step, max_step),
                        Game(state // 3, step + 1, goal, winner, min_step, max_step)])
        return all([Game(state - 2, step + 1, goal, winner, min_step, max_step),
                        Game(state - 4, step + 1, goal, winner, min_step, max_step),
                        Game(state // 3, step + 1, goal, winner, min_step, max_step)])
    else:
        return winner == step % 2 and min_step <= step

#19
ans_19 = 0
print("№19: ", end='')
for i in range(41, 1000):
    if Game(i, 0, 40, 0, 1, 2):
        print(i)
        ans_19 = i
        break

#20
print("№20: ", end="")
c = 0
for i in range(41, 1000):
    if Game(i, 0, 40, 1, 3, 3):
        if c < 1:
            print(i, end=", ")
        else: print(i)
        c += 1
    if c == 2:
        break

#21
print("№21: ", end="")
for i in range(41, 1000):
    if Game(i, 0, 40, 0, 2, 4) and not(Game(i, 0, 40, 0, 2, 2)):
        print(i)
        break
