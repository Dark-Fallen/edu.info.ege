'''
Этапы решения задач 5 номера:
1. Определение функции, реализующей представленный в задаче алгоритм.
2. Реализация алгоритма перебора результата выполнения заданного значения для нахождения ответа.

Задача:
На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
1. Строится двоичная запись числа N.
2. Далее эта запись обрабатывается по следующему правилу: 
а) если сумма цифр в двоичной записи числа чётная, то к этой записи справа дописывается 0, а затем два левых разряда заменяются на 10;
б) если сумма цифр в двоичной записи числа нечётная, то к этой записи справа дописывается 1, а затем два левых разряда заменяются на 11.
3. Результат переводится в десятичную систему и выводится на экран.
Полученная таким образом запись является двоичной записью искомого числа R. 
Например, для исходного числа 6 = 110 результатом является число 1000 = 8, а для исходного числа 4 = 100 результатом является 
число 1101 = 13.
Укажите минимальное число N, после обработки которого с помощью этого алгоритма получается число R, не меньшее, чем 16. 

Ответ: 8.
'''

# Решение задачи

def toBinary(number: int) -> str:
    res: str = ''
    while number > 0:
        res += str(number % 2)
        number //= 2
    return res[::-1]

def fromBinary(binaryNumber: str) -> int:
    res: int = 0
    reversed_binary: str = binaryNumber[::-1]
    for i in range(len(reversed_binary)):
        res += int(reversed_binary[i]) * pow(2, i)
    return res

def Algorythm(N: int) -> int:
    binaryForm: str = toBinary(N)
    digitsSum: int = 0
    for i in binaryForm:
        digitsSum += int(i)
    if digitsSum % 2 == 0:
        binaryForm += '0'
        binaryForm = '10' + binaryForm[2:len(binaryForm)]
    else:
        binaryForm += '1'
        binaryForm = '11' + binaryForm[2:len(binaryForm)]
    return fromBinary(binaryForm)

N: int = 1

while Algorythm(N) < 16:
    N += 1

print(N)
